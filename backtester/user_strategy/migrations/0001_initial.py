# Generated by Django 5.0.1 on 2024-02-15 14:31

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Strategy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('minimum_amount', models.FloatField(blank=True, max_length=100, null=True)),
                ('about', models.TextField(blank=True, null=True)),
                ('type', models.CharField(choices=[('OptionBuying', 'OptionBuying'), ('OptionSelling', 'OptionSelling')], default='OptionBuying', max_length=30)),
                ('subscription_duration', models.FloatField(blank=True, max_length=100, null=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='FiveEMAStrategy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strategy_name', models.CharField(default='FiveEMA', max_length=100)),
                ('instrument_id', models.IntegerField(blank=True, null=True)),
                ('tradingsymbol', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(choices=[('Running', 'Running'), ('Saved', 'Saved'), ('Stopped', 'Stopped')], default='Stopped', max_length=30)),
                ('running_date', models.DateField(auto_now=True, null=True)),
                ('running_time', models.TimeField(auto_now=True, null=True)),
                ('qty', models.IntegerField(default=0)),
                ('ema_period', models.IntegerField(default=5)),
                ('ema_timeframe', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('5', '5'), ('10', '10'), ('15', '15')], default='5', max_length=100)),
                ('target_multiplier', models.FloatField(blank=True, null=True)),
                ('target_count_type', models.CharField(blank=True, choices=[('Multiplier', 'Multiplier'), ('POINTS', 'POINTS'), ('PERCENTAGE', 'PERCENTAGE')], max_length=50, null=True)),
                ('max_trades', models.IntegerField(blank=True, null=True)),
                ('is_deletd', models.BooleanField(default=False)),
                ('indicator_type', models.CharField(blank=True, choices=[('EMA', 'EMA'), ('SMA', 'SMA'), ('DEMA', 'DEMA'), ('TRIMA', 'TRIMA')], default='EMA', max_length=100, null=True)),
                ('trade_type', models.CharField(choices=[('BANKNIFTY', 'BANKNIFTY'), ('NIFTY', 'NIFTY'), ('FINNIFTY', 'FINNIFTY')], default='BANKNIFTY', max_length=100)),
                ('position_type', models.CharField(choices=[('ATM', 'ATM'), ('OTM', 'OTM'), ('ITM', 'ITM')], default='ATM', max_length=100)),
                ('expiry_days', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('expiry_month', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('expiry_year', models.IntegerField(default=2023, validators=[django.core.validators.MinValueValidator(2023)])),
                ('strick_distance', models.IntegerField(default=0)),
                ('segment', models.CharField(choices=[('cash', 'cash'), ('future', 'future'), ('option', 'option')], default='cash', max_length=100)),
                ('instrument_product', models.CharField(choices=[('NRML', 'NRML'), ('MIS', 'MIS'), ('CNC', 'CNC')], default='NRML', max_length=100)),
                ('strategy_add_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('sl_count_type', models.CharField(blank=True, choices=[('High/Low', 'High/Low'), ('POINTS', 'POINTS'), ('PERCENTAGE', 'PERCENTAGE')], max_length=50, null=True)),
                ('sl_value', models.FloatField(blank=True, null=True)),
                ('candle_size_type', models.CharField(blank=True, choices=[('PERCENTAGE', 'PERCENTAGE'), ('POINTS', 'POINTS')], default='POINTS', max_length=50, null=True)),
                ('trailing_sl_multiplyer', models.FloatField(blank=True, null=True)),
                ('max_alert_candle_point', models.FloatField(blank=True, null=True)),
                ('min_alert_candle_size', models.FloatField(blank=True, default=0, null=True)),
                ('stoploss_buffer', models.FloatField(blank=True, null=True)),
                ('paper_trading', models.BooleanField(default=False)),
                ('only_long', models.BooleanField(default=False)),
                ('only_short', models.BooleanField(default=False)),
                ('ignore_first_candle', models.BooleanField(default=False)),
                ('day_high_low', models.BooleanField(default=False)),
                ('profit_booking', models.BooleanField(default=False)),
                ('trailing_sl', models.BooleanField(default=False)),
                ('single_trade_mode', models.BooleanField(default=False)),
                ('increase_qty_mode', models.BooleanField(default=False)),
                ('option_type', models.CharField(blank=True, choices=[('option_buying', 'option_buying'), ('option_selling', 'option_selling')], max_length=30, null=True)),
                ('square_off_min', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('target_limit', models.IntegerField(blank=True, null=True)),
                ('sl_limit', models.IntegerField(blank=True, null=True)),
                ('buffer_type', models.CharField(blank=True, choices=[('POINTS', 'POINTS'), ('PERCENTAGE', 'PERCENTAGE')], max_length=50, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('user_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('strategy_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='strategy_five_ema_strategy', to='user_strategy.strategy')),
            ],
        ),
        migrations.CreateModel(
            name='UserSubscribedStrategy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strategy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='user_strategy.strategy')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
